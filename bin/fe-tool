#!/usr/bin/env node

const pkg = require('../package.json');
const yargs = require('yargs');
const figlet = require('figlet');

const chalkAnimation = require('chalk-animation');
const path = require('path');

const fs = require('fs');

const compile = require('../lib/compile.js');

const { error, warning, gray, success, prefix, log } = require('../lib/log.js');

const binName = Object.keys(pkg.bin)[0];

// const logo = figlet.textSync('E p o i n t  ' + binName.split('').join(' '), {
const logo = figlet.textSync('Epoint ' + binName, {
    // width: 200,
    horizontalLayout: 'fitted',
    whitespaceBreak: true
});

// console.log(logo);
const a = chalkAnimation.rainbow(logo);

setTimeout(() => {
    a.stop();
    console.log('');
    run();
}, 20);

// run();

function run() {
    yargs
        .command('start', 'start epoint tool')
        .usage('Usage: $0 start')
        .example('$0 start', '从当前目录启动监控压缩服务')

        .command('init', 'init an config file')
        .example('$0 init', '在当前目录初始化监控所需配置文件')

        .command('copytheme', "copy a theme's files")
        .usage('Usage: $0 copytheme')
        .example('$0 copytheme', '启动拷贝主题的交互式命令')

        .command('sass', 'compile a sass/scss file')
        .usage('Usage: $0 sass -f [要编译文件sass、scss文件] -m [是否同时输出.min.css文件]')
        .example('$0 sass -f a.scss -m', '编译当前目录的a.scss 文件 同时输出a.css a.min.css两个文件')

        .command('min', 'minify a javascript/css file', function (yargs) {
            return yargs.alias('h', 'help').usage('Usage: $0 min [要压缩的文件1] [要压缩的文件2]').example('$0 min a.js b.css', '压缩当前目录下的a.js b.css 输出 a.min.js b.min.css').help().argv;
        })
        .usage('Usage: $0 min [要压缩的文件1] [要压缩的文件2]')
        .example('$0 min a.js b.css', '压缩当前目录下的a.js b.css 输出 a.min.js b.min.css')
        // .version(function() {
        //     return pkg.version;
        // })
        .epilogue(
            [
                // prettier-ignore
                'you can run this blow command:',
                `  ${binName} start`,
                '',
                `  ${binName} init`,
                '',
                `  ${binName} copytheme`,
                '',
                `  ${binName} sass`,
                '',
                `  ${binName} min`,
                ''
            ].join('\n')
        );

    const argv = yargs.argv;

    // if (argv) {
    //     console.log('argv');
    //     Object.keys(argv).forEach(k => console.log(k, argv[k]));
    // }

    const command = argv._[0];

    log(`use command: ${command || ''}`);
    if (command == 'start') {
        // 开始执行的命令
        yargs.reset();
        let out = yargs
            .option({
                config: {
                    alias: 'c',
                    desc: '配置文件',
                    default: 'epoint.config.js'
                }
            })
            .default('cwd', function () {
                return process.cwd();
            })
            .help().argv;

        let configFilePath = out.config;
        if (configFilePath) {
            configFilePath = path.resolve(process.cwd(), configFilePath);

            if (!fs.existsSync(configFilePath)) {
                log(error('配置文件不存在，请使用 init 命令初始化或使用 -config 配置项传入'));
            }

            log('do start ', success(configFilePath));

            compile.runCompile(require(configFilePath));
        }
        return;
    }

    if (command == 'init') {
        // 初始化配置文件
        // console.log('__dirname', __dirname);

        // console.log('process.cwd()', process.cwd());
        // copyConfigFile();
        require('../lib/initConfig.js')();
        return;
    }

    if (command == 'copytheme') {
        require('../lib/copyFui.js')();
        return;
    }

    if (command == 'sass') {
        yargs.reset();
        let out = yargs
            .option({
                file: {
                    alias: 'f',
                    desc: '要编译的文件',
                    default: ''
                },
                min: {
                    alias: 'm',
                    desc: '',
                    boolean: true,
                    default: false
                }
            })
            .default('cwd', function () {
                return process.cwd();
            })
            .help().argv;
        let inputFilePath = out.file;
        let withMin = out.min;
        if (inputFilePath) {
            inputFilePath = path.resolve(process.cwd(), inputFilePath);

            log('do sass ', success(inputFilePath), withMin, typeof withMin);
            compile.renderSass(inputFilePath, withMin);
        }
        return;
    }
    if (command == 'min') {
        yargs.reset();

        let out = yargs(process.argv.slice(3))
            .default('cwd', function () {
                return process.cwd();
            })
            .help().argv;

        const source = out._;
        if (source.length) {
            log('do minify: ', success(source));
            compile.mini(source);
        } else {
            log(warning('缺少文件输入，请使用 fe-tool min -h 查看帮助'));
        }

        return;
    }

    yargs.showHelp();
}
